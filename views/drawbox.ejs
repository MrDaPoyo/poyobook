<head>
    <title><%- drawbox.name.charAt(0).toUpperCase() + drawbox.name.slice(1) %>'s DrawBox! - <%= env.CLEAN_HOST %></title>
    <meta name="description" content="<%= drawbox.name %>'s DrawBox! Draw something and submit it to the gallery! pls pls pls">
    <link rel="stylesheet" href="/retrieveCustomStyles/<%= drawbox.id %>">
</head>
<body>
    <div class="container">
        <h1 class="title"><%- drawbox.name.charAt(0).toUpperCase() + drawbox.name.slice(1) %>'s DrawBox!</h1>
        <canvas id="drawCanvas" width="200" height="200" style="border:1px solid #000000;"></canvas>
        <button id="undoButton">Undo</button>
        <br>
            <% if (drawbox.usernames) { %>
                <label for="creator">Your Name:</label>
                <input id="creator" type="text" value="Anonymous" maxlength="10">
                <br>
            <% } %>
            <% if (drawbox.descriptions) { %>
                <label for="description">Leave a message for <%= drawbox.name %>!</label>
                <input id="description" type="text" maxlength="100">
            <% } %>
            <% if (drawbox.captcha) { %>
                <div id="captcha-container">
                    <script src="/js/captcha.js"></script>
                </div>
            <% } %>
            <br>
        <button id="submitDrawing">Submit Drawing</button>
        <script>
            const canvas = document.getElementById('drawCanvas');
            const ctx = canvas.getContext('2d');
            let drawing = false;
            let drawingHistory = [];

            // Set canvas background to white
            ctx.fillStyle = '<%= drawbox.imageBackgroundColor %>';
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            ctx.imageSmoothingEnabled = false;
            saveState();

            canvas.addEventListener('mousedown', startDrawing);
            canvas.addEventListener('mouseup', stopDrawing);
            canvas.addEventListener('mousemove', draw);

            function startDrawing(event) {
                drawing = true;
                ctx.beginPath();
                draw(event); // Start drawing immediately
            }

            function stopDrawing() {
                drawing = false;
                ctx.beginPath();
                saveState(); // Save state after each stroke
            }

            function draw(event) {
                if (!drawing) return;
                ctx.lineWidth = 5;
                ctx.lineCap = 'round';
                ctx.strokeStyle = '<%= drawbox.imageBrushColor %>';

                let x, y;
                if (event.touches) {
                    x = event.touches[0].pageX - canvas.offsetLeft;
                    y = event.touches[0].pageY - canvas.offsetTop;
                } else {
                    x = event.pageX - canvas.offsetLeft;
                    y = event.pageY - canvas.offsetTop;
                }

                ctx.lineTo(x, y);
                ctx.stroke();
                ctx.beginPath();
                ctx.moveTo(x, y);
            }

            function saveState() {
                drawingHistory.push(canvas.toDataURL());
            }

            function undo() {
                if (drawingHistory.length > 1) {
                    drawingHistory.pop(); // Remove current state
                    let img = new Image();
                    img.src = drawingHistory[drawingHistory.length - 1];
                    img.onload = function () {
                        ctx.clearRect(0, 0, canvas.width, canvas.height);
                        ctx.drawImage(img, 0, 0);
                    }
                }
            }

            // Add touch event listeners for mobile compatibility
            canvas.addEventListener('touchstart', startDrawing);
            canvas.addEventListener('touchend', stopDrawing);
            canvas.addEventListener('touchmove', draw);

            document.getElementById('submitDrawing').addEventListener('click', () => {
                convertImage();
            });

            document.getElementById('undoButton').addEventListener('click', undo);

            function convertImage() {
                var image = canvas.toDataURL("image/png");
                sendMessage(image);
            }

            function sendMessage(image) {
                // Check if image is completely white/blank
                var blank = true;
                var imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
                for (var i = 0; i < imageData.data.length; i += 4) {
                    if (imageData.data[i] !== 255 || imageData.data[i+1] !== 255 || imageData.data[i+2] !== 255) {
                        blank = false;
                        break;
                    }
                }
                if (blank) {
                    alert('Cannot submit a blank image!');
                    return;
                }
                var msg = {
                    image: image, 
                    id: '<%= drawbox.id %>',
                    <% if (drawbox.usernames) { %> 
                        creator: document.getElementById('creator').value || 'Anonymous',
                    <% } %>
                    <% if (drawbox.descriptions) { %>
                        description: document.getElementById('description').value || 'No message left.'
                    <% } %>
                }
                <% if (drawbox.captcha) { %>
                    msg.captchaAnswer = document.getElementById('captchaAnswer').value;
                    msg.captchaToken = document.getElementById('captchaToken').value;
                <% } %>
                var msg = JSON.stringify(msg);
                var xhr = new XMLHttpRequest();
                xhr.open('POST', '/addEntry', true);
                xhr.setRequestHeader('Content-Type', 'application/json');
                xhr.send(msg);
                xhr.onload = function () {
                    if (xhr.status == 200) {
                        alert('Drawing submitted successfully!');
                    } else {
                        console.error('Error:', xhr.statusText);
                    }
                };
                setTimeout(() => { window.location.reload(); }, 2000);
            }
        </script>
        <hr>
        <div class="image-gallery">
            <% drawbox.images.forEach(image=> { %>
                <div class="image-container" style="max-width: 200px; margin: 10px; position: relative;">
                    <% if (drawbox.usernames) { %>
                        <p class="image-name"><%= image.creator %></p>
                    <% } %>
                    <% if (drawbox.descriptions) { %>
                        <small class="image-description"><%= image.description %></small>
                    <% } %>
                    <img src="/retrieveImage/<%= image.id %>?domain=<%= drawbox.domain %>" alt="Drawing" style="max-width: 200px;">
                    <% if (user && drawbox.name == user.username) { %>
                        <button id="deleteButton" onclick="deleteImage('<%= image.id %>')" style="position: absolute; top: 1vh; right: 1vh;">X</button>
                    <% } %>
                </div>
            <% }); %>
            <% if (user && drawbox.name == user.username) { %>
                <script type="text/javascript">
                    function deleteImage(id) {
                        fetch('/deleteImage/' + id, {
                            method: 'DELETE',
                            headers: {
                                'Content-Type': 'application/json'
                            }
                        }).then(() => {
                            location.reload();
                        });
                    }
                </script>
            <% } %>
        </div>
    </div>
</body>